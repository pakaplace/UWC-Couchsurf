// Code generated by Prisma (prisma@1.30.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  place: (where?: PlaceWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  place: (where: PlaceWhereUniqueInput) => PlacePromise;
  places: (
    args?: {
      where?: PlaceWhereInput;
      orderBy?: PlaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Place>;
  placesConnection: (
    args?: {
      where?: PlaceWhereInput;
      orderBy?: PlaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PlaceConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createPlace: (data: PlaceCreateInput) => PlacePromise;
  updatePlace: (
    args: { data: PlaceUpdateInput; where: PlaceWhereUniqueInput }
  ) => PlacePromise;
  updateManyPlaces: (
    args: { data: PlaceUpdateManyMutationInput; where?: PlaceWhereInput }
  ) => BatchPayloadPromise;
  upsertPlace: (
    args: {
      where: PlaceWhereUniqueInput;
      create: PlaceCreateInput;
      update: PlaceUpdateInput;
    }
  ) => PlacePromise;
  deletePlace: (where: PlaceWhereUniqueInput) => PlacePromise;
  deleteManyPlaces: (where?: PlaceWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  place: (
    where?: PlaceSubscriptionWhereInput
  ) => PlaceSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GENDER = "MALE" | "FEMALE";

export type UWC = "PEARSON" | "ATLANTIC";

export type PlaceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "latitude_ASC"
  | "latitude_DESC"
  | "longitude_ASC"
  | "longitude_DESC"
  | "city_ASC"
  | "city_DESC"
  | "state_ASC"
  | "state_DESC"
  | "country_ASC"
  | "country_DESC"
  | "street_ASC"
  | "street_DESC"
  | "nearbyDescription_ASC"
  | "nearbyDescription_DESC"
  | "accomodationDescription_ASC"
  | "accomodationDescription_DESC"
  | "bedrooms_ASC"
  | "bedrooms_DESC"
  | "bathrooms_ASC"
  | "bathrooms_DESC"
  | "expirationDate_ASC"
  | "expirationDate_DESC"
  | "numGuests_ASC"
  | "numGuests_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "password_ASC"
  | "password_DESC"
  | "gender_ASC"
  | "gender_DESC"
  | "nationality_ASC"
  | "nationality_DESC"
  | "description_ASC"
  | "description_DESC"
  | "phoneNumber_ASC"
  | "phoneNumber_DESC"
  | "facebookUrl_ASC"
  | "facebookUrl_DESC"
  | "twitterUrl_ASC"
  | "twitterUrl_DESC"
  | "linkedinUrl_ASC"
  | "linkedinUrl_DESC"
  | "isVerified_ASC"
  | "isVerified_DESC"
  | "isAdmin_ASC"
  | "isAdmin_DESC"
  | "uwcName_ASC"
  | "uwcName_DESC"
  | "question1_ASC"
  | "question1_DESC"
  | "question2_ASC"
  | "question2_DESC"
  | "question3_ASC"
  | "question3_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PlaceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PlaceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  latitude?: String;
  latitude_not?: String;
  latitude_in?: String[] | String;
  latitude_not_in?: String[] | String;
  latitude_lt?: String;
  latitude_lte?: String;
  latitude_gt?: String;
  latitude_gte?: String;
  latitude_contains?: String;
  latitude_not_contains?: String;
  latitude_starts_with?: String;
  latitude_not_starts_with?: String;
  latitude_ends_with?: String;
  latitude_not_ends_with?: String;
  longitude?: String;
  longitude_not?: String;
  longitude_in?: String[] | String;
  longitude_not_in?: String[] | String;
  longitude_lt?: String;
  longitude_lte?: String;
  longitude_gt?: String;
  longitude_gte?: String;
  longitude_contains?: String;
  longitude_not_contains?: String;
  longitude_starts_with?: String;
  longitude_not_starts_with?: String;
  longitude_ends_with?: String;
  longitude_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  state?: String;
  state_not?: String;
  state_in?: String[] | String;
  state_not_in?: String[] | String;
  state_lt?: String;
  state_lte?: String;
  state_gt?: String;
  state_gte?: String;
  state_contains?: String;
  state_not_contains?: String;
  state_starts_with?: String;
  state_not_starts_with?: String;
  state_ends_with?: String;
  state_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  street?: String;
  street_not?: String;
  street_in?: String[] | String;
  street_not_in?: String[] | String;
  street_lt?: String;
  street_lte?: String;
  street_gt?: String;
  street_gte?: String;
  street_contains?: String;
  street_not_contains?: String;
  street_starts_with?: String;
  street_not_starts_with?: String;
  street_ends_with?: String;
  street_not_ends_with?: String;
  nearbyDescription?: String;
  nearbyDescription_not?: String;
  nearbyDescription_in?: String[] | String;
  nearbyDescription_not_in?: String[] | String;
  nearbyDescription_lt?: String;
  nearbyDescription_lte?: String;
  nearbyDescription_gt?: String;
  nearbyDescription_gte?: String;
  nearbyDescription_contains?: String;
  nearbyDescription_not_contains?: String;
  nearbyDescription_starts_with?: String;
  nearbyDescription_not_starts_with?: String;
  nearbyDescription_ends_with?: String;
  nearbyDescription_not_ends_with?: String;
  accomodationDescription?: String;
  accomodationDescription_not?: String;
  accomodationDescription_in?: String[] | String;
  accomodationDescription_not_in?: String[] | String;
  accomodationDescription_lt?: String;
  accomodationDescription_lte?: String;
  accomodationDescription_gt?: String;
  accomodationDescription_gte?: String;
  accomodationDescription_contains?: String;
  accomodationDescription_not_contains?: String;
  accomodationDescription_starts_with?: String;
  accomodationDescription_not_starts_with?: String;
  accomodationDescription_ends_with?: String;
  accomodationDescription_not_ends_with?: String;
  bedrooms?: String;
  bedrooms_not?: String;
  bedrooms_in?: String[] | String;
  bedrooms_not_in?: String[] | String;
  bedrooms_lt?: String;
  bedrooms_lte?: String;
  bedrooms_gt?: String;
  bedrooms_gte?: String;
  bedrooms_contains?: String;
  bedrooms_not_contains?: String;
  bedrooms_starts_with?: String;
  bedrooms_not_starts_with?: String;
  bedrooms_ends_with?: String;
  bedrooms_not_ends_with?: String;
  bathrooms?: String;
  bathrooms_not?: String;
  bathrooms_in?: String[] | String;
  bathrooms_not_in?: String[] | String;
  bathrooms_lt?: String;
  bathrooms_lte?: String;
  bathrooms_gt?: String;
  bathrooms_gte?: String;
  bathrooms_contains?: String;
  bathrooms_not_contains?: String;
  bathrooms_starts_with?: String;
  bathrooms_not_starts_with?: String;
  bathrooms_ends_with?: String;
  bathrooms_not_ends_with?: String;
  expirationDate?: String;
  expirationDate_not?: String;
  expirationDate_in?: String[] | String;
  expirationDate_not_in?: String[] | String;
  expirationDate_lt?: String;
  expirationDate_lte?: String;
  expirationDate_gt?: String;
  expirationDate_gte?: String;
  expirationDate_contains?: String;
  expirationDate_not_contains?: String;
  expirationDate_starts_with?: String;
  expirationDate_not_starts_with?: String;
  expirationDate_ends_with?: String;
  expirationDate_not_ends_with?: String;
  numGuests?: String;
  numGuests_not?: String;
  numGuests_in?: String[] | String;
  numGuests_not_in?: String[] | String;
  numGuests_lt?: String;
  numGuests_lte?: String;
  numGuests_gt?: String;
  numGuests_gte?: String;
  numGuests_contains?: String;
  numGuests_not_contains?: String;
  numGuests_starts_with?: String;
  numGuests_not_starts_with?: String;
  numGuests_ends_with?: String;
  numGuests_not_ends_with?: String;
  ownedBy?: UserWhereInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: PlaceWhereInput[] | PlaceWhereInput;
  OR?: PlaceWhereInput[] | PlaceWhereInput;
  NOT?: PlaceWhereInput[] | PlaceWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  firstName?: String;
  firstName_not?: String;
  firstName_in?: String[] | String;
  firstName_not_in?: String[] | String;
  firstName_lt?: String;
  firstName_lte?: String;
  firstName_gt?: String;
  firstName_gte?: String;
  firstName_contains?: String;
  firstName_not_contains?: String;
  firstName_starts_with?: String;
  firstName_not_starts_with?: String;
  firstName_ends_with?: String;
  firstName_not_ends_with?: String;
  lastName?: String;
  lastName_not?: String;
  lastName_in?: String[] | String;
  lastName_not_in?: String[] | String;
  lastName_lt?: String;
  lastName_lte?: String;
  lastName_gt?: String;
  lastName_gte?: String;
  lastName_contains?: String;
  lastName_not_contains?: String;
  lastName_starts_with?: String;
  lastName_not_starts_with?: String;
  lastName_ends_with?: String;
  lastName_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  gender?: GENDER;
  gender_not?: GENDER;
  gender_in?: GENDER[] | GENDER;
  gender_not_in?: GENDER[] | GENDER;
  nationality?: String;
  nationality_not?: String;
  nationality_in?: String[] | String;
  nationality_not_in?: String[] | String;
  nationality_lt?: String;
  nationality_lte?: String;
  nationality_gt?: String;
  nationality_gte?: String;
  nationality_contains?: String;
  nationality_not_contains?: String;
  nationality_starts_with?: String;
  nationality_not_starts_with?: String;
  nationality_ends_with?: String;
  nationality_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  phoneNumber?: String;
  phoneNumber_not?: String;
  phoneNumber_in?: String[] | String;
  phoneNumber_not_in?: String[] | String;
  phoneNumber_lt?: String;
  phoneNumber_lte?: String;
  phoneNumber_gt?: String;
  phoneNumber_gte?: String;
  phoneNumber_contains?: String;
  phoneNumber_not_contains?: String;
  phoneNumber_starts_with?: String;
  phoneNumber_not_starts_with?: String;
  phoneNumber_ends_with?: String;
  phoneNumber_not_ends_with?: String;
  facebookUrl?: String;
  facebookUrl_not?: String;
  facebookUrl_in?: String[] | String;
  facebookUrl_not_in?: String[] | String;
  facebookUrl_lt?: String;
  facebookUrl_lte?: String;
  facebookUrl_gt?: String;
  facebookUrl_gte?: String;
  facebookUrl_contains?: String;
  facebookUrl_not_contains?: String;
  facebookUrl_starts_with?: String;
  facebookUrl_not_starts_with?: String;
  facebookUrl_ends_with?: String;
  facebookUrl_not_ends_with?: String;
  twitterUrl?: String;
  twitterUrl_not?: String;
  twitterUrl_in?: String[] | String;
  twitterUrl_not_in?: String[] | String;
  twitterUrl_lt?: String;
  twitterUrl_lte?: String;
  twitterUrl_gt?: String;
  twitterUrl_gte?: String;
  twitterUrl_contains?: String;
  twitterUrl_not_contains?: String;
  twitterUrl_starts_with?: String;
  twitterUrl_not_starts_with?: String;
  twitterUrl_ends_with?: String;
  twitterUrl_not_ends_with?: String;
  linkedinUrl?: String;
  linkedinUrl_not?: String;
  linkedinUrl_in?: String[] | String;
  linkedinUrl_not_in?: String[] | String;
  linkedinUrl_lt?: String;
  linkedinUrl_lte?: String;
  linkedinUrl_gt?: String;
  linkedinUrl_gte?: String;
  linkedinUrl_contains?: String;
  linkedinUrl_not_contains?: String;
  linkedinUrl_starts_with?: String;
  linkedinUrl_not_starts_with?: String;
  linkedinUrl_ends_with?: String;
  linkedinUrl_not_ends_with?: String;
  isVerified?: Boolean;
  isVerified_not?: Boolean;
  isAdmin?: Boolean;
  isAdmin_not?: Boolean;
  uwcName?: UWC;
  uwcName_not?: UWC;
  uwcName_in?: UWC[] | UWC;
  uwcName_not_in?: UWC[] | UWC;
  question1?: String;
  question1_not?: String;
  question1_in?: String[] | String;
  question1_not_in?: String[] | String;
  question1_lt?: String;
  question1_lte?: String;
  question1_gt?: String;
  question1_gte?: String;
  question1_contains?: String;
  question1_not_contains?: String;
  question1_starts_with?: String;
  question1_not_starts_with?: String;
  question1_ends_with?: String;
  question1_not_ends_with?: String;
  question2?: String;
  question2_not?: String;
  question2_in?: String[] | String;
  question2_not_in?: String[] | String;
  question2_lt?: String;
  question2_lte?: String;
  question2_gt?: String;
  question2_gte?: String;
  question2_contains?: String;
  question2_not_contains?: String;
  question2_starts_with?: String;
  question2_not_starts_with?: String;
  question2_ends_with?: String;
  question2_not_ends_with?: String;
  question3?: String;
  question3_not?: String;
  question3_in?: String[] | String;
  question3_not_in?: String[] | String;
  question3_lt?: String;
  question3_lte?: String;
  question3_gt?: String;
  question3_gte?: String;
  question3_contains?: String;
  question3_not_contains?: String;
  question3_starts_with?: String;
  question3_not_starts_with?: String;
  question3_ends_with?: String;
  question3_not_ends_with?: String;
  places_every?: PlaceWhereInput;
  places_some?: PlaceWhereInput;
  places_none?: PlaceWhereInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface PlaceCreateInput {
  id?: ID_Input;
  title: String;
  description?: String;
  latitude: String;
  longitude: String;
  city?: String;
  state?: String;
  country?: String;
  street?: String;
  nearbyDescription?: String;
  accomodationDescription?: String;
  bedrooms?: String;
  bathrooms?: String;
  expirationDate?: String;
  numGuests?: String;
  ownedBy: UserCreateOneWithoutPlacesInput;
}

export interface UserCreateOneWithoutPlacesInput {
  create?: UserCreateWithoutPlacesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserCreateWithoutPlacesInput {
  id?: ID_Input;
  email: String;
  firstName?: String;
  lastName?: String;
  password?: String;
  gender?: GENDER;
  nationality?: String;
  description?: String;
  phoneNumber?: String;
  facebookUrl?: String;
  twitterUrl?: String;
  linkedinUrl?: String;
  isVerified?: Boolean;
  isAdmin?: Boolean;
  uwcName?: UWC;
  question1?: String;
  question2?: String;
  question3?: String;
}

export interface PlaceUpdateInput {
  title?: String;
  description?: String;
  latitude?: String;
  longitude?: String;
  city?: String;
  state?: String;
  country?: String;
  street?: String;
  nearbyDescription?: String;
  accomodationDescription?: String;
  bedrooms?: String;
  bathrooms?: String;
  expirationDate?: String;
  numGuests?: String;
  ownedBy?: UserUpdateOneRequiredWithoutPlacesInput;
}

export interface UserUpdateOneRequiredWithoutPlacesInput {
  create?: UserCreateWithoutPlacesInput;
  update?: UserUpdateWithoutPlacesDataInput;
  upsert?: UserUpsertWithoutPlacesInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateWithoutPlacesDataInput {
  email?: String;
  firstName?: String;
  lastName?: String;
  password?: String;
  gender?: GENDER;
  nationality?: String;
  description?: String;
  phoneNumber?: String;
  facebookUrl?: String;
  twitterUrl?: String;
  linkedinUrl?: String;
  isVerified?: Boolean;
  isAdmin?: Boolean;
  uwcName?: UWC;
  question1?: String;
  question2?: String;
  question3?: String;
}

export interface UserUpsertWithoutPlacesInput {
  update: UserUpdateWithoutPlacesDataInput;
  create: UserCreateWithoutPlacesInput;
}

export interface PlaceUpdateManyMutationInput {
  title?: String;
  description?: String;
  latitude?: String;
  longitude?: String;
  city?: String;
  state?: String;
  country?: String;
  street?: String;
  nearbyDescription?: String;
  accomodationDescription?: String;
  bedrooms?: String;
  bathrooms?: String;
  expirationDate?: String;
  numGuests?: String;
}

export interface UserCreateInput {
  id?: ID_Input;
  email: String;
  firstName?: String;
  lastName?: String;
  password?: String;
  gender?: GENDER;
  nationality?: String;
  description?: String;
  phoneNumber?: String;
  facebookUrl?: String;
  twitterUrl?: String;
  linkedinUrl?: String;
  isVerified?: Boolean;
  isAdmin?: Boolean;
  uwcName?: UWC;
  question1?: String;
  question2?: String;
  question3?: String;
  places?: PlaceCreateManyWithoutOwnedByInput;
}

export interface PlaceCreateManyWithoutOwnedByInput {
  create?: PlaceCreateWithoutOwnedByInput[] | PlaceCreateWithoutOwnedByInput;
  connect?: PlaceWhereUniqueInput[] | PlaceWhereUniqueInput;
}

export interface PlaceCreateWithoutOwnedByInput {
  id?: ID_Input;
  title: String;
  description?: String;
  latitude: String;
  longitude: String;
  city?: String;
  state?: String;
  country?: String;
  street?: String;
  nearbyDescription?: String;
  accomodationDescription?: String;
  bedrooms?: String;
  bathrooms?: String;
  expirationDate?: String;
  numGuests?: String;
}

export interface UserUpdateInput {
  email?: String;
  firstName?: String;
  lastName?: String;
  password?: String;
  gender?: GENDER;
  nationality?: String;
  description?: String;
  phoneNumber?: String;
  facebookUrl?: String;
  twitterUrl?: String;
  linkedinUrl?: String;
  isVerified?: Boolean;
  isAdmin?: Boolean;
  uwcName?: UWC;
  question1?: String;
  question2?: String;
  question3?: String;
  places?: PlaceUpdateManyWithoutOwnedByInput;
}

export interface PlaceUpdateManyWithoutOwnedByInput {
  create?: PlaceCreateWithoutOwnedByInput[] | PlaceCreateWithoutOwnedByInput;
  delete?: PlaceWhereUniqueInput[] | PlaceWhereUniqueInput;
  connect?: PlaceWhereUniqueInput[] | PlaceWhereUniqueInput;
  set?: PlaceWhereUniqueInput[] | PlaceWhereUniqueInput;
  disconnect?: PlaceWhereUniqueInput[] | PlaceWhereUniqueInput;
  update?:
    | PlaceUpdateWithWhereUniqueWithoutOwnedByInput[]
    | PlaceUpdateWithWhereUniqueWithoutOwnedByInput;
  upsert?:
    | PlaceUpsertWithWhereUniqueWithoutOwnedByInput[]
    | PlaceUpsertWithWhereUniqueWithoutOwnedByInput;
  deleteMany?: PlaceScalarWhereInput[] | PlaceScalarWhereInput;
  updateMany?:
    | PlaceUpdateManyWithWhereNestedInput[]
    | PlaceUpdateManyWithWhereNestedInput;
}

export interface PlaceUpdateWithWhereUniqueWithoutOwnedByInput {
  where: PlaceWhereUniqueInput;
  data: PlaceUpdateWithoutOwnedByDataInput;
}

export interface PlaceUpdateWithoutOwnedByDataInput {
  title?: String;
  description?: String;
  latitude?: String;
  longitude?: String;
  city?: String;
  state?: String;
  country?: String;
  street?: String;
  nearbyDescription?: String;
  accomodationDescription?: String;
  bedrooms?: String;
  bathrooms?: String;
  expirationDate?: String;
  numGuests?: String;
}

export interface PlaceUpsertWithWhereUniqueWithoutOwnedByInput {
  where: PlaceWhereUniqueInput;
  update: PlaceUpdateWithoutOwnedByDataInput;
  create: PlaceCreateWithoutOwnedByInput;
}

export interface PlaceScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  latitude?: String;
  latitude_not?: String;
  latitude_in?: String[] | String;
  latitude_not_in?: String[] | String;
  latitude_lt?: String;
  latitude_lte?: String;
  latitude_gt?: String;
  latitude_gte?: String;
  latitude_contains?: String;
  latitude_not_contains?: String;
  latitude_starts_with?: String;
  latitude_not_starts_with?: String;
  latitude_ends_with?: String;
  latitude_not_ends_with?: String;
  longitude?: String;
  longitude_not?: String;
  longitude_in?: String[] | String;
  longitude_not_in?: String[] | String;
  longitude_lt?: String;
  longitude_lte?: String;
  longitude_gt?: String;
  longitude_gte?: String;
  longitude_contains?: String;
  longitude_not_contains?: String;
  longitude_starts_with?: String;
  longitude_not_starts_with?: String;
  longitude_ends_with?: String;
  longitude_not_ends_with?: String;
  city?: String;
  city_not?: String;
  city_in?: String[] | String;
  city_not_in?: String[] | String;
  city_lt?: String;
  city_lte?: String;
  city_gt?: String;
  city_gte?: String;
  city_contains?: String;
  city_not_contains?: String;
  city_starts_with?: String;
  city_not_starts_with?: String;
  city_ends_with?: String;
  city_not_ends_with?: String;
  state?: String;
  state_not?: String;
  state_in?: String[] | String;
  state_not_in?: String[] | String;
  state_lt?: String;
  state_lte?: String;
  state_gt?: String;
  state_gte?: String;
  state_contains?: String;
  state_not_contains?: String;
  state_starts_with?: String;
  state_not_starts_with?: String;
  state_ends_with?: String;
  state_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  street?: String;
  street_not?: String;
  street_in?: String[] | String;
  street_not_in?: String[] | String;
  street_lt?: String;
  street_lte?: String;
  street_gt?: String;
  street_gte?: String;
  street_contains?: String;
  street_not_contains?: String;
  street_starts_with?: String;
  street_not_starts_with?: String;
  street_ends_with?: String;
  street_not_ends_with?: String;
  nearbyDescription?: String;
  nearbyDescription_not?: String;
  nearbyDescription_in?: String[] | String;
  nearbyDescription_not_in?: String[] | String;
  nearbyDescription_lt?: String;
  nearbyDescription_lte?: String;
  nearbyDescription_gt?: String;
  nearbyDescription_gte?: String;
  nearbyDescription_contains?: String;
  nearbyDescription_not_contains?: String;
  nearbyDescription_starts_with?: String;
  nearbyDescription_not_starts_with?: String;
  nearbyDescription_ends_with?: String;
  nearbyDescription_not_ends_with?: String;
  accomodationDescription?: String;
  accomodationDescription_not?: String;
  accomodationDescription_in?: String[] | String;
  accomodationDescription_not_in?: String[] | String;
  accomodationDescription_lt?: String;
  accomodationDescription_lte?: String;
  accomodationDescription_gt?: String;
  accomodationDescription_gte?: String;
  accomodationDescription_contains?: String;
  accomodationDescription_not_contains?: String;
  accomodationDescription_starts_with?: String;
  accomodationDescription_not_starts_with?: String;
  accomodationDescription_ends_with?: String;
  accomodationDescription_not_ends_with?: String;
  bedrooms?: String;
  bedrooms_not?: String;
  bedrooms_in?: String[] | String;
  bedrooms_not_in?: String[] | String;
  bedrooms_lt?: String;
  bedrooms_lte?: String;
  bedrooms_gt?: String;
  bedrooms_gte?: String;
  bedrooms_contains?: String;
  bedrooms_not_contains?: String;
  bedrooms_starts_with?: String;
  bedrooms_not_starts_with?: String;
  bedrooms_ends_with?: String;
  bedrooms_not_ends_with?: String;
  bathrooms?: String;
  bathrooms_not?: String;
  bathrooms_in?: String[] | String;
  bathrooms_not_in?: String[] | String;
  bathrooms_lt?: String;
  bathrooms_lte?: String;
  bathrooms_gt?: String;
  bathrooms_gte?: String;
  bathrooms_contains?: String;
  bathrooms_not_contains?: String;
  bathrooms_starts_with?: String;
  bathrooms_not_starts_with?: String;
  bathrooms_ends_with?: String;
  bathrooms_not_ends_with?: String;
  expirationDate?: String;
  expirationDate_not?: String;
  expirationDate_in?: String[] | String;
  expirationDate_not_in?: String[] | String;
  expirationDate_lt?: String;
  expirationDate_lte?: String;
  expirationDate_gt?: String;
  expirationDate_gte?: String;
  expirationDate_contains?: String;
  expirationDate_not_contains?: String;
  expirationDate_starts_with?: String;
  expirationDate_not_starts_with?: String;
  expirationDate_ends_with?: String;
  expirationDate_not_ends_with?: String;
  numGuests?: String;
  numGuests_not?: String;
  numGuests_in?: String[] | String;
  numGuests_not_in?: String[] | String;
  numGuests_lt?: String;
  numGuests_lte?: String;
  numGuests_gt?: String;
  numGuests_gte?: String;
  numGuests_contains?: String;
  numGuests_not_contains?: String;
  numGuests_starts_with?: String;
  numGuests_not_starts_with?: String;
  numGuests_ends_with?: String;
  numGuests_not_ends_with?: String;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: PlaceScalarWhereInput[] | PlaceScalarWhereInput;
  OR?: PlaceScalarWhereInput[] | PlaceScalarWhereInput;
  NOT?: PlaceScalarWhereInput[] | PlaceScalarWhereInput;
}

export interface PlaceUpdateManyWithWhereNestedInput {
  where: PlaceScalarWhereInput;
  data: PlaceUpdateManyDataInput;
}

export interface PlaceUpdateManyDataInput {
  title?: String;
  description?: String;
  latitude?: String;
  longitude?: String;
  city?: String;
  state?: String;
  country?: String;
  street?: String;
  nearbyDescription?: String;
  accomodationDescription?: String;
  bedrooms?: String;
  bathrooms?: String;
  expirationDate?: String;
  numGuests?: String;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  firstName?: String;
  lastName?: String;
  password?: String;
  gender?: GENDER;
  nationality?: String;
  description?: String;
  phoneNumber?: String;
  facebookUrl?: String;
  twitterUrl?: String;
  linkedinUrl?: String;
  isVerified?: Boolean;
  isAdmin?: Boolean;
  uwcName?: UWC;
  question1?: String;
  question2?: String;
  question3?: String;
}

export interface PlaceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PlaceWhereInput;
  AND?: PlaceSubscriptionWhereInput[] | PlaceSubscriptionWhereInput;
  OR?: PlaceSubscriptionWhereInput[] | PlaceSubscriptionWhereInput;
  NOT?: PlaceSubscriptionWhereInput[] | PlaceSubscriptionWhereInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Place {
  id: ID_Output;
  title: String;
  description?: String;
  latitude: String;
  longitude: String;
  city?: String;
  state?: String;
  country?: String;
  street?: String;
  nearbyDescription?: String;
  accomodationDescription?: String;
  bedrooms?: String;
  bathrooms?: String;
  expirationDate?: String;
  numGuests?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface PlacePromise extends Promise<Place>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  country: () => Promise<String>;
  street: () => Promise<String>;
  nearbyDescription: () => Promise<String>;
  accomodationDescription: () => Promise<String>;
  bedrooms: () => Promise<String>;
  bathrooms: () => Promise<String>;
  expirationDate: () => Promise<String>;
  numGuests: () => Promise<String>;
  ownedBy: <T = UserPromise>() => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PlaceSubscription
  extends Promise<AsyncIterator<Place>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  street: () => Promise<AsyncIterator<String>>;
  nearbyDescription: () => Promise<AsyncIterator<String>>;
  accomodationDescription: () => Promise<AsyncIterator<String>>;
  bedrooms: () => Promise<AsyncIterator<String>>;
  bathrooms: () => Promise<AsyncIterator<String>>;
  expirationDate: () => Promise<AsyncIterator<String>>;
  numGuests: () => Promise<AsyncIterator<String>>;
  ownedBy: <T = UserSubscription>() => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface User {
  id: ID_Output;
  email: String;
  firstName?: String;
  lastName?: String;
  password?: String;
  gender?: GENDER;
  nationality?: String;
  description?: String;
  phoneNumber?: String;
  facebookUrl?: String;
  twitterUrl?: String;
  linkedinUrl?: String;
  isVerified?: Boolean;
  isAdmin?: Boolean;
  uwcName?: UWC;
  question1?: String;
  question2?: String;
  question3?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  gender: () => Promise<GENDER>;
  nationality: () => Promise<String>;
  description: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  facebookUrl: () => Promise<String>;
  twitterUrl: () => Promise<String>;
  linkedinUrl: () => Promise<String>;
  isVerified: () => Promise<Boolean>;
  isAdmin: () => Promise<Boolean>;
  uwcName: () => Promise<UWC>;
  question1: () => Promise<String>;
  question2: () => Promise<String>;
  question3: () => Promise<String>;
  places: <T = FragmentableArray<Place>>(
    args?: {
      where?: PlaceWhereInput;
      orderBy?: PlaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<GENDER>>;
  nationality: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  facebookUrl: () => Promise<AsyncIterator<String>>;
  twitterUrl: () => Promise<AsyncIterator<String>>;
  linkedinUrl: () => Promise<AsyncIterator<String>>;
  isVerified: () => Promise<AsyncIterator<Boolean>>;
  isAdmin: () => Promise<AsyncIterator<Boolean>>;
  uwcName: () => Promise<AsyncIterator<UWC>>;
  question1: () => Promise<AsyncIterator<String>>;
  question2: () => Promise<AsyncIterator<String>>;
  question3: () => Promise<AsyncIterator<String>>;
  places: <T = Promise<AsyncIterator<PlaceSubscription>>>(
    args?: {
      where?: PlaceWhereInput;
      orderBy?: PlaceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PlaceConnection {
  pageInfo: PageInfo;
  edges: PlaceEdge[];
}

export interface PlaceConnectionPromise
  extends Promise<PlaceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlaceEdge>>() => T;
  aggregate: <T = AggregatePlacePromise>() => T;
}

export interface PlaceConnectionSubscription
  extends Promise<AsyncIterator<PlaceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlaceEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlaceSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PlaceEdge {
  node: Place;
  cursor: String;
}

export interface PlaceEdgePromise extends Promise<PlaceEdge>, Fragmentable {
  node: <T = PlacePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlaceEdgeSubscription
  extends Promise<AsyncIterator<PlaceEdge>>,
    Fragmentable {
  node: <T = PlaceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlace {
  count: Int;
}

export interface AggregatePlacePromise
  extends Promise<AggregatePlace>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlaceSubscription
  extends Promise<AsyncIterator<AggregatePlace>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface PlaceSubscriptionPayload {
  mutation: MutationType;
  node: Place;
  updatedFields: String[];
  previousValues: PlacePreviousValues;
}

export interface PlaceSubscriptionPayloadPromise
  extends Promise<PlaceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlacePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlacePreviousValuesPromise>() => T;
}

export interface PlaceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlaceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlaceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlacePreviousValuesSubscription>() => T;
}

export interface PlacePreviousValues {
  id: ID_Output;
  title: String;
  description?: String;
  latitude: String;
  longitude: String;
  city?: String;
  state?: String;
  country?: String;
  street?: String;
  nearbyDescription?: String;
  accomodationDescription?: String;
  bedrooms?: String;
  bathrooms?: String;
  expirationDate?: String;
  numGuests?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface PlacePreviousValuesPromise
  extends Promise<PlacePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  latitude: () => Promise<String>;
  longitude: () => Promise<String>;
  city: () => Promise<String>;
  state: () => Promise<String>;
  country: () => Promise<String>;
  street: () => Promise<String>;
  nearbyDescription: () => Promise<String>;
  accomodationDescription: () => Promise<String>;
  bedrooms: () => Promise<String>;
  bathrooms: () => Promise<String>;
  expirationDate: () => Promise<String>;
  numGuests: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface PlacePreviousValuesSubscription
  extends Promise<AsyncIterator<PlacePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  latitude: () => Promise<AsyncIterator<String>>;
  longitude: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  street: () => Promise<AsyncIterator<String>>;
  nearbyDescription: () => Promise<AsyncIterator<String>>;
  accomodationDescription: () => Promise<AsyncIterator<String>>;
  bedrooms: () => Promise<AsyncIterator<String>>;
  bathrooms: () => Promise<AsyncIterator<String>>;
  expirationDate: () => Promise<AsyncIterator<String>>;
  numGuests: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  firstName?: String;
  lastName?: String;
  password?: String;
  gender?: GENDER;
  nationality?: String;
  description?: String;
  phoneNumber?: String;
  facebookUrl?: String;
  twitterUrl?: String;
  linkedinUrl?: String;
  isVerified?: Boolean;
  isAdmin?: Boolean;
  uwcName?: UWC;
  question1?: String;
  question2?: String;
  question3?: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  password: () => Promise<String>;
  gender: () => Promise<GENDER>;
  nationality: () => Promise<String>;
  description: () => Promise<String>;
  phoneNumber: () => Promise<String>;
  facebookUrl: () => Promise<String>;
  twitterUrl: () => Promise<String>;
  linkedinUrl: () => Promise<String>;
  isVerified: () => Promise<Boolean>;
  isAdmin: () => Promise<Boolean>;
  uwcName: () => Promise<UWC>;
  question1: () => Promise<String>;
  question2: () => Promise<String>;
  question3: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  gender: () => Promise<AsyncIterator<GENDER>>;
  nationality: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  phoneNumber: () => Promise<AsyncIterator<String>>;
  facebookUrl: () => Promise<AsyncIterator<String>>;
  twitterUrl: () => Promise<AsyncIterator<String>>;
  linkedinUrl: () => Promise<AsyncIterator<String>>;
  isVerified: () => Promise<AsyncIterator<Boolean>>;
  isAdmin: () => Promise<AsyncIterator<Boolean>>;
  uwcName: () => Promise<AsyncIterator<UWC>>;
  question1: () => Promise<AsyncIterator<String>>;
  question2: () => Promise<AsyncIterator<String>>;
  question3: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "UWC",
    embedded: false
  },
  {
    name: "GENDER",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Place",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
